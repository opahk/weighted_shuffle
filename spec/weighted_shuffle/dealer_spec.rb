require 'spec_helper'

module WeightedShuffle
  describe Dealer do
    describe '#weighted_shuffle' do

      context 'without factor' do
        [[ [[:a, 1], [:b, 2]], [:a, :b] ],
          [ [[1, 1], [2, 3]], [1, 2] ],
          [ [[1, 1], [2, 0]], [1, 2] ],
          [ [[1, 1], [2, 0], [3, 0]], [1, 2, 3] ],
          [ [[2.0, 1], [:a, 1.5], ['a', 2.3]], [2.0, :a, 'a'] ]]
          .each do |input, output|

          it "returns a permutation of #{output} given #{input}" do
            expect(output.permutation.to_a).to include(
              Dealer.new(input).weighted_shuffle)
          end

          it 'gives correct relative frequency for first position' do
            weights = input.map(&:last)
            # calculate probabiities
            sum = weights.sum
            probabilities = weights.map { |weight| weight.to_f / sum }

            # establish frequencies
            size = 1000
            samples = size.times.map { Dealer.new(input).weighted_shuffle }
            frequencies = input.map(&:first).map do |e|
              samples.select { |s| s.first == e }.count.to_f / size
            end

            # calculate sum of absolute values of differences
            diff = probabilities.zip(frequencies).map { |p,f| (p - f).abs }.sum
            expect(diff).to be < 0.1
          end
        end
      end

      context 'with factor' do

        it 'big factor has a big impact' do
          input = [[1, 1], [2, 1], [3, 1.01]]
          samples = 10_000.times.map do
            Dealer.new(input).weighted_shuffle factor: 10_000
          end
          expect(samples.map(&:first).count(3)).to be >= (samples.size - 2)
        end

        it 'gives expected relative frequency ' do
          input = [[:a, 1], [:b, 2]]
          size = 1000
          samples = size.times.map do
            Dealer.new(input).weighted_shuffle factor: 2
          end
          frequencies = input.map(&:first).map do |e|
            samples.select { |sample| sample.first == e }.count.to_f / size
          end

          diff = [1.0 / 5, 4.0 / 5].zip(frequencies).map { |p, f| (p - f).abs }
            .sum
          expect(diff).to be < 0.1
        end
      end

      context 'with small floats' do
        it 'has the same size after shuffling' do
          weights = [
            0.12468972448772396, 0.10139757401707189,
            0.1845077056574677, 0.12468972586121459, 0.10240587060850476, 0.0,
            0.0, 0.18450770766116042, 0.0, 0.0, 0.0, 0.0, 0.11736217209682814,
            0.19489918290817296, 0.19447192807989377, 0.0, 0.15648420234778623,
            0.12479078549604793, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.32577657939867083, 0.18706086155991095, 0.0, 0.0,
            0.20348532566185534, 0.0, 0.11435872734963022, 0.0, 0.0, 0.0, 0.0,
            0.07068679144953034, 0.10139758800783334, 0.03635358347513393, 0.0,
            0.0, 0.0, 0.0, 0.12472401438105729, 0.051764062945824946, 0.0, 0.0,
            0.05457362152020671, 0.0, 0.05002583606548683, 0.0,
            0.10067290611870104, 0.1949645085984969, 0.0, 0.0, 0.0, 0.0,
            0.3032640471258623, 0.0, 0.0, 0.0, 0.0, 0.0, 0.18451924004837394,
            0.05400320353244004, 0.0, 0.0, 0.17819166740432266, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.18451025219577188, 0.0,
            0.11467337381852814, 0.11463145754490314, 0.0, 0.1248792885371573,
            0.12475012017854065, 0.0, 0.15406686381903686, 0.0,
            0.11736220195689062, 0.0, 0.22592617720300123, 0.0,
            0.11459724622451667, 0.0, 0.18707527617865521, 0.0,
            0.11403591065381173, 0.19932386172188543, 0.16164053449625737,
            0.12481935520871668, 0.18707527851482503, 0.1993238632877844, 0.0,
            0.0, 0.0, 0.07302383268702269, 0.11459725170236978, 0.0,
            0.1870789639293427, 0.0, 0.0, 0.1993378380187052, 0.0,
            0.12478141380181458, 0.0, 0.0911413675497143, 0.0, 0.0, 0.0,
            0.1247908255316344, 0.12475722905618125, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.10125302767480043, 0.0, 0.11445019368504897, 0.0,
            0.012341077118974253, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.030491439645174423, 0.0, 0.0, 0.031097019266368365, 0.0, 0.0,
            0.07550302891056884, 0.07637769827803292, 0.07878816721644509,
            0.07942993740530895, 0.0, 0.18451927424157188, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.12481101761728647, 0.10158734953296791, 0.0, 0.0,
            0.1944719858649667, 0.1145758321034625, 0.0, 0.11042779993815506,
            0.18451928015628127, 0.1856517768269537, 0.0, 0.0, 0.0,
            0.11453218420543543, 0.0, 0.0, 0.0, 0.11465592638377708,
            0.09243930301143342, 0.0, 0.0, 0.0, 0.0, 0.1781729455401017,
            0.08481698901933438, 0.17370002348437918, 0.0, 0.0, 0.0,
            0.0828798851172116, 0.19935300440295314, 0.0, 0.0,
            0.19447199723681563, 0.11736224243185833, 0.12484276053232812,
            0.12484276092046981, 0.0, 0.12481939295478856, 0.12481939335811772,
            0.1144294281189823, 0.18707899934652708, 0.0, 0.11459097096939792,
            0.1311806460864984, 0.0, 0.07996694776461506, 0.20683677880737186,
            0.0, 0.049244608026770505, 0.12487053207687292,
            0.12020833211454485, 0.0, 0.0, 0.0, 0.0, 0.05825098435544611,
            0.06497791359511716, 0.18708439669148336, 0.09875680528317686,
            0.12333449123065938, 0.10285077361962804, 0.0, 0.09121635986887745,
            0.0, 0.12488763588046355, 0.09575178932619967, 0.08004735632962713,
            0.0, 0.1145639312017073, 0.18452253888484688, 0.11901052893342742,
            0.08367548278587976, 0.11449978172793021, 0.17259836643898047,
            0.1845267762674667, 0.16551454084731781, 0.10501434573223839,
            0.02872752035777424, 0.12491492264603646, 0.19934227199472815, 0.0,
            0.1655577598150867, 0.1628675303829502, 0.19936052461858958,
            0.12487054583509272, 0.10288752773593031, 0.15209650432652813,
            0.2089413855665271, 0.2853046414907811, 0.12929260282387434,
            0.24068988812816916, 0.19498991736121982, 0.12158472146983244,
            0.1417350173178224, 0.11469847582377812, 0.0, 0.0535387939568259,
            0.028715698581125756, 0.06820454245272675, 0.10139767466254897,
            0.10139767504979168
          ]
          input = (1..weights.size).to_a.zip weights
          sample = Dealer.new(input).weighted_shuffle
          expect(sample.size).to eq input.size
        end
      end
    end
  end
end
